<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\MyClasses\Directory;
use ROBOAMP\Files;
use App\Test as test_class;
use ROBOAMP\Git;
use ROBOAMP\Batman;
use Symfony\Component\Process\Process;

class test extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'test';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Test all the different packages';
    private $testing_file_path;
    private $class_name;
    private $dir_labels;
    private $dirs;
    private $feature_path;
    private $testing_message="";
    private $arr_methods_in_class=array();

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle(){

        $directory_class=new Directory();
        $file=new Files();


        $this->dirs=$directory_class->get_dirs_in_dir(base_path('Package'));

        $this->dir_labels=[];

        foreach ($this->dirs as $item) {
            $this->dir_labels[]=$item['basename'];
        }
        print_r($this->dirs);


        $this->update_arr_positions();


        $option = $this->menu('Select Package',$this->dir_labels)->open();

        $selected_menu=$this->dirs[$option];
        $package_name=$selected_menu['basename'];
        $package_path=$selected_menu['full_path'];

        $this->save_latest_used_option($package_name);

        $this->clone_package_class_into_test($selected_menu);

        $this->update_testing_file();

        $res=$this->run_test();

        if($res)$res=$this->commit($package_path,$package_name);


        if($res) {
            $this->warn("UPDATING COMPOSER");

            $process = new Process('composer update');

            $process->run();
        }

        $this->list_untested_methods();

        $this->warn($this->testing_message);


    }
    private function list_untested_methods(){
        $this->warn("Untested Methods");
        $headers = ['Class', 'Method'];

        foreach ($this->arr_methods_in_class as $item){
            $obj[]=['class'=>$this->class_name,'method'=>$item];
        }

        $this->table($headers, $obj);

    }
    public function warn($string, $verbosity = null){
        echo "\n\n";
        parent::warn($string, $verbosity); // TODO: Change the autogenerated stub
        echo "\n\n";
    }

    private function commit($package_path,$package_name){


        chdir($package_path."/src");
        $res=shell_exec("git add -A;git commit -m 'update'; git push origin; ./tag.sh");
        if($this->everything_up_to_date($res))return false;
        //$result=Strings::find_string_in_string($res,"nothing to commit, working tree clean");
        return $this->commit_bookworm($package_name);


    }
    private function everything_up_to_date($res){
        $string_class=new Batman();
        $clean_tree_msg="nothing to commit, working tree clean";
        if($string_class->get_line_number_x($res,4)==$clean_tree_msg)return true;
        return false;

    }
    private function commit_bookworm($package_name){

       $this->signature();


        chdir(base_path());

        $command="git add -A;git commit -m 'auto update for package ". $package_name."'; git push origin;";

        $res=shell_exec($command);

        return true;
    }

    private function run_test($forced=false){

        if($forced) return true;

        $result=false;

        $str=new Batman();

            if (!file_exists($this->feature_path . "Test.php")) {
                echo "\nThere is no testing file for package " . $this->class_name . "\n";

                if ($this->confirm("Do you still want to commit changes?", false)) {
                    return $this->run_test(true);
                }
                return $result;
            }


        $res=shell_exec('vendor/bin/phpunit Package/'.$this->class_name);

        $this->get_untested_methods();

        $str_res=strpos($res,"OK");

            if ($str_res == false) {
                $no_tests = $this->get_last_line_of_test_output($res);
                if ($no_tests == "No tests executed!" && $forced)
                    echo $res;
                echo "\nCommit has been canceled\n";
                dd($no_tests,$res,__METHOD__);
                return $result;
            }
            $this->testing_message=$this->get_last_line_of_test_output($res);


        return true;
    }
    private function get_untested_methods(){
        $my_array=new Git();
        $class_name="\ROBOAMP\\".$this->class_name;

        //total methods in $this->class_name
        $class_methods = get_class_methods($class_name);
        $parent_class=get_parent_class($class_name);
        $parent_class_methods=get_class_methods($parent_class);

        $class_methods=array_diff($class_methods,$parent_class_methods);

        $methods_in_class=[];
        foreach ($class_methods as $method_name) {
            $methods_in_class[]['method_name']=$method_name;
        }
        $methods_in_class=$my_array->arrayOrderBy($methods_in_class,'method_name');
        $this->arr_methods_in_class=$my_array->flatten_array_with_one_key($methods_in_class);
    }

    private function get_last_line_of_test_output($res){

        $res=explode("\n",$res);
        return $res[6];
    }
    private function save_latest_used_option($package_name){
        $test=new test_class();
        $test->package=$package_name;
        $test->save();

        $test->deleteUntil($test->id);
    }
    private function clone_package_class_into_test($selected_menu){
        $directory=new Directory();


        $package_full_path=$selected_menu['full_path'];
        $this->class_name=$selected_menu['basename'];
        //grab the file and copy it into the test folder
        $files=new Files();
        $origin_file=$package_full_path."/src/".$this->class_name.".php";



        $res=include $origin_file;
        $class_name="\ROBOAMP\\".$this->class_name;
        $class_instance=new $class_name();
      //  dd(get_class_methods($class_instance));
       // dd($this->class_name,__METHOD__);
       // dd("BOOO");

        $this->feature_path=$package_full_path."/tests/Feature/";

        $this->testing_file_path=$this->feature_path.$this->class_name."_test.php";

        //make sure the directory exists
        $directory->create_directory($directory->get_current_directory($this->testing_file_path));

        $files->copy_file($origin_file,$this->testing_file_path);
    }

    //remove stuff from package's main class that has been copied into test/Feature
    private function update_testing_file(){
        $files=new Files();
        $content=$files->get_file_content($this->testing_file_path);

        $str=str_replace("namespace ROBOAMP;","",$content);


        if(strpos($str,"class ".$this->class_name." extends")!=false){
            $str=str_replace("class ".$this->class_name." extends",
                "class ".$this->class_name."_test extends",$str);
        }else{
            $str=str_replace("class ".$this->class_name."{",
                "class ".$this->class_name."_test{",$str);
        }

        $files->re_write_file($str,$this->testing_file_path);
    }

    //makes sure that the latest test I ran is on the first position
    private function update_arr_positions(){

        $test=test_class::all()->last();
        $my_array=new Git();

        if($test!=null) {
            $position = $my_array->check_for_string_in_array($test->package, $this->dir_labels, true);

            $this->dir_labels = $my_array->move_to_top_by_index($this->dir_labels, $position);
            $this->dirs = $my_array->move_to_top_by_index($this->dirs, $position);
        }
    }

    private function signature(){
        echo " __________________________________________________________________\n";
        echo "|                                                                 |\n";
        echo "|   ____    ___    ___   _  ____        __ ___   ____   __  __    |\n";
        echo "|  | __ )  / _ \  / _ \ | |/ /\ \      / // _ \ |  _ \ |  \/  |   |\n";
        echo "|  |  _ \ | | | || | | || ' /  \ \ /\ / /| | | || |_) || |\/| |   |\n";
        echo "|  | |_) || |_| || |_| || . \   \ V  V / | |_| ||  _ < | |  | |   |\n";
        echo "|  |____/  \___/  \___/ |_|\_\   \_/\_/   \___/ |_| \_\|_|  |_|   |\n";
        echo "|                                                                 |\n";
        echo "|                                                                 |\n";
        echo "|_________________________________________________________________|\n";
        echo "\n\n";
    }



}
